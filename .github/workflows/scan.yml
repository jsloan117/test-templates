---
name: acs

on:
  workflow_call:
    inputs:
      image:
        description: image to scan
        default: ${{ github.repository }}
        required: false
        type: string

      sbom-file:
        description: sbom file to scan
        default: sbom.spdx.json
        required: false
        type: string

      fail-build:
        description: fail the build if a vulnerability is found with a higher severity. that severity defaults to medium and can be set with severity-cutoff.
        default: true
        required: false
        type: boolean

      severity-cutoff:
        description: minimum vulnerability severity to trigger a failure. valid choices are "negligible", "low", "medium", "high" and "critical".
        default: critical
        required: false
        type: string

      output-format:
        description: anchore scan output format
        default: sarif
        required: false
        type: string

      if-no-files-found:
        description: action taken if no file
        default: warn
        required: false
        type: string

      artifact_name:
        description: uploaded artifact name
        default: ${{ github.ref_name }}
        required: false
        type: string

      artifact_overwrite:
        description: whether to overwrite the artifact
        default: true
        required: false
        type: boolean

    outputs:
      sarif-id:
        description: The ID of the uploaded SARIF file.
        value: ${{ jobs.scan.outputs.sarif-id }}

      sarif-artifact-id:
        description: GitHub ID of an Artifact, can be used by the REST API
        value: ${{ jobs.scan.outputs.sarif-artifact-id }}

      sarif-artifact-url:
        description: URL to download the artifact
        value: ${{ jobs.scan.outputs.sarif-artifact-url }}

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    outputs:
      sarif-id: ${{ steps.codeql.outputs.sarif-id }}
      sarif-artifact-id: ${{ steps.upload.outputs.artifact-id }}
      sarif-artifact-url: ${{ steps.upload.outputs.artifact-url }}

    steps:
      # https://github.com/marketplace/actions/download-a-build-artifact
      - uses: actions/download-artifact@v4
        id: dlsbom
        with:
          name: ${{ inputs.sbom-file }}

      # https://github.com/marketplace/actions/anchore-container-scan
      - name: Anchore Container Scan
        uses: anchore/scan-action@v3.6.4
        id: scan
        with:
          sbom: ${{ steps.dlsbom.outputs.download-path }}/${{ inputs.sbom-file }}
          # image: ${{ inputs.image }}
          fail-build: ${{ inputs.fail-build }}
          severity-cutoff: ${{ inputs.severity-cutoff }}
          output-format: ${{ inputs.output-format }}

      # https://github.com/github/codeql-action
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning
      - name: CodeQL Upload SARIF Report
        uses: github/codeql-action/upload-sarif@v3
        id: codeql
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
          wait-for-processing: true

      # - name: Set Sarif Report artifact variable
      #   run: |
      #     echo "sarif_artifact=$(echo ${image_tag} | sed -e 's|/|-|g' -e 's|:|_|g').sarif" >> $GITHUB_ENV
      #   env:
      #     image_tag: ${{ steps.meta.outputs.tags }}

      # https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload Sarif Report
        uses: actions/upload-artifact@v4
        id: upload
        with:
          # name: ${{ env.sarif_artifact }}
          name: ${{ inputs.artifact_name }}
          path: ${{ steps.scan.outputs.sarif }}
          if-no-files-found: ${{ inputs.if-no-files-found }}
          overwrite: ${{ inputs.artifact_overwrite }}

