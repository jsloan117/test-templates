---
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# https://docs.github.com/en/actions/learn-github-actions/contexts

# container image builder template
name: cib-template

on:
  workflow_call:
    inputs:
      context:
        description: docker context (path) to start build from
        default: .
        required: false
        type: string

      file:
        description: dockerfile to build, relative to context path
        default: Dockerfile
        required: false
        type: string

      flavor:
        # https://github.com/marketplace/actions/docker-metadata-action#flavor-input
        description: three rules to (optionally) set for tag-rules, latest, prefix, and suffix
        # will tag latest on a git tag push, or if you add a type=semver or type=match tag-rules
        # NOTE: if you are seeing `latest` retagged when you don't expect it, set this latest=false
        default: latest=auto
        required: false
        type: string

      image:
        description: image name to build
        default: ${{ github.repository }}
        required: false
        type: string

      platforms:
        # https://github.com/marketplace/actions/build-and-push-docker-images#inputs
        # https://docs.docker.com/engine/reference/commandline/buildx_build/#platform
        description: platforms to build
        # common ones: linux/amd64,linux/arm64,linux/arm/v7
        default: linux/amd64
        required: false
        type: string

      push:
        description: push image to registry(s)
        default: true
        # default: ${{ github.event_name != 'pull_request' }}
        required: false
        type: boolean

      load:
        description: load image locally
        default: false
        # default: ${{ github.event_name == 'pull_request' }}
        required: false
        type: boolean

      # tags:
      #   # https://github.com/marketplace/actions/docker-metadata-action#tags-input
      #   description: use docker-metadata action to create tags from a key-value pair list in csv format
      #   default: |
      #     type=semver,pattern={{version}},enable={{is_default_branch}}
      #     type=semver,pattern={{major}}.{{minor}},enable={{is_default_branch}}
      #     type=semver,pattern={{major}},enable={{is_default_branch}}
      #     type=ref,event=branch
      #     type=ref,event=pr
      #     type=raw,value=latest,enable={{is_default_branch}}
      #   required: false
      #   type: string
      # type=schedule,pattern={{date 'YYYYMMDD'}}

      tags:
        # https://github.com/marketplace/actions/docker-metadata-action#tags-input
        description: use docker-metadata action to create tags from a key-value pair list in csv format
        default: |
          type=semver,pattern=v{{version}}
          type=semver,pattern=v{{major}}.{{minor}}
          type=semver,pattern=v{{major}}
          type=ref,event=tag
          type=ref,event=pr
        required: false
        type: string

      target:
        description: build stage to target
        required: false
        type: string

      dockerhub-enable:
        description: login to dockerhub
        default: false
        required: false
        type: boolean

      ghcr-enable:
        description: login to ghcr
        default: true
        required: false
        type: boolean

      # https://docs.docker.com/build/attestations/slsa-provenance/
      provenance:
        description: generate provenance attestation for the build
        default: true
        required: false
        type: boolean

      # https://docs.docker.com/build/attestations/sbom/
      sbom:
        description: generate sbom attestation for the build
        default: true
        required: false
        type: boolean

      sbom-artifact-name:
        description: sbom artifact name
        default: sbom.spdx.json
        required: false
        type: string

      # https://github.com/anchore/sbom-action?tab=readme-ov-file#anchoresbom-action
      sbom-snapshot-enable:
        description: whether to upload the sbom to the github dependency submission api
        default: false
        required: false
        type: boolean

      sbom-upload-artifact:
        description: whether to upload the sbom as an artifact
        default: true
        required: false
        type: boolean

      sbom-file-format:
        description: sbom file format
        default: spdx-json
        required: false
        type: string

      build-args:
        description: set build time variables
        default: ''
        required: false
        type: string

      no-cache:
        description: use cache or not
        default: false
        required: false
        type: boolean

    secrets:
      dockerhub-token:
        description: dockerhub token
        required: false

      dockerhub-username:
        description: dockerhub username
        required: false

    outputs:
      digest:
        description: image digest
        value: ${{ jobs.build.outputs.digest }}

      image:
        description: image name
        value: ${{ inputs.image }}

      sbom-artifact-name:
        description: sbom artifact name
        value: ${{ inputs.sbom-artifact-name }}

      version:
        description: docker metadata version
        value: ${{ jobs.build.outputs.version }}

# set permissions here for what's required to run this Reusable Workflow
# However, permisions are set in the GITHUB_TOKEN by the **calling** workflow
# Calling permissions must be equal to or greater than these reusable permissions for it to work
# https://docs.github.com/en/actions/using-workflows/reusing-workflows#supported-keywords-for-jobs-that-call-a-reusable-workflow

permissions: {}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      packages: write

    outputs:
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}

    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@v4

      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.3.0
        with:
          install: true
          version: latest
          platforms: ${{ inputs.platforms }}
          cache-binary: ${{ github.event_name != 'pull_request' }}

      # https://github.com/marketplace/actions/docker-metadata-action
      - name: Docker Metadata
        uses: docker/metadata-action@v5.5.1
        id: meta
        with:
          images: ${{ inputs.image }}
          flavor: ${{ inputs.flavor }}
          tags: ${{ inputs.tags }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to DockerHub
        if: github.event_name != 'pull_request' && inputs.dockerhub-enable
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to GHCR
        if: github.event_name != 'pull_request' && inputs.ghcr-enable
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build and push
        uses: docker/build-push-action@v6.3.0
        id: build
        with:
          file: ${{ inputs.file }}
          platforms: ${{ steps.buildx.outputs.platforms }}
          target: ${{ inputs.target }}
          # build-args: ${{ inputs.build-args }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          push: ${{ github.event_name != 'pull_request' && inputs.push }}
          # load: ${{ inputs.load }}
          load: ${{ inputs.load || github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: ${{ github.event_name == 'push' && 'type=gha,mode=max' || '' }}
          provenance: ${{ inputs.provenance }}
          sbom: ${{ inputs.sbom }}

      # https://github.com/marketplace/actions/anchore-sbom-action
      - name: Anchore SBOM Action
        uses: anchore/sbom-action@v0.16.0
        id: sbom
        with:
          image: ${{ inputs.image }}
          artifact-name: ${{ inputs.sbom-artifact-name }}
          format: ${{ inputs.sbom-file-format }}
          upload-artifact: ${{ inputs.sbom-upload-artifact }}
          dependency-snapshot: ${{ inputs.sbom-snapshot-enable }}

