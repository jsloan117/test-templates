---
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# https://docs.github.com/en/actions/learn-github-actions/contexts

name: docker build and push

on:
  workflow_call:
    # allow reuse of this workflow in other repos
    inputs:
      context:
        description: Docker context (path) to start build from
        default: .
        required: false
        type: string

      file:
        description: Dockerfile to build, relative to context path
        default: Dockerfile
        required: false
        type: string

      flavor:
        # https://github.com/marketplace/actions/docker-metadata-action#flavor-input
        description: Three rules to (optionally) set for tag-rules, latest, prefix, and suffix
        # will tag latest on a git tag push, or if you add a type=semver or type=match tag-rules
        # NOTE: if you are seeing `latest` retagged when you don't expect it, set this latest=false
        default: latest=auto
        required: false
        type: string

      images:
        description: A list of the account/repo names for docker build to push to
        default: |
          ${{ github.repository }}
          ghcr.io/${{ github.repository }}
        required: false
        type: string

      platforms:
        # https://github.com/marketplace/actions/build-and-push-docker-images#inputs
        # https://docs.docker.com/engine/reference/commandline/buildx_build/#platform
        description: Platforms to build for
        # common ones: linux/amd64,linux/arm64,linux/arm/v7
        default: linux/amd64
        required: false
        type: string

      push:
        description: Push image to registry(s)
        default: true
        required: false
        type: boolean

      tags:
        # https://github.com/marketplace/actions/docker-metadata-action#tags-input
        description: Use docker-metadata action to create tags from a key-value pair list in CSV format
        default: |
          type=semver,pattern={{version}},enable={{is_default_branch}}
          type=semver,pattern={{major}}.{{minor}},enable={{is_default_branch}}
          type=semver,pattern={{major}},enable={{is_default_branch}}
          type=ref,event=branch
          type=ref,event=pr
        required: false
        type: string

      target:
        description: Build stage to target
        required: false
        type: string

      dockerhub-enable:
        description: Log into Docker Hub
        default: false
        required: false
        type: boolean

      ghcr-enable:
        description: Log into GHCR
        default: true
        required: false
        type: boolean

      # https://docs.docker.com/build/attestations/slsa-provenance/
      provenance:
        description: Generate provenance attestation for the build
        default: true
        required: false
        type: boolean

      # https://docs.docker.com/build/attestations/sbom/
      sbom:
        description: Generate SBOM attestation for the build
        default: true
        required: false
        type: boolean

      build-args:
        description: Docker build arguments
        default: ''
        required: false
        type: string

      cosign-sign-enable:
        description: Enable cosign signing
        default: false
        required: false
        type: boolean

      cosign-verify-enable:
        description: Enable cosign verifying
        default: false
        required: false
        type: boolean

      cosign-upload-key:
        description: Enable cosign upload key
        default: false
        required: false
        type: boolean

    secrets:
      dockerhub-username:
        description: Docker Hub username
        required: false
      dockerhub-token:
        description: Docker Hub token
        required: false
      cosign-key:
        description: Cosign private key
        required: false
      cosign-password:
        description: Cosign private key password
        required: false

    # outputs:
    #   image-tag:
    #     description: "single-use image tag for GHA runs"
    #     value: ${{ jobs.build.outputs.image-tag }}

# set permissions here for what's required to run this Reusable Workflow
# However, permisions are set in the GITHUB_TOKEN by the **calling** workflow
# Calling permissions must be equal to or greater than these reusable permissions for it to work
# https://docs.github.com/en/actions/using-workflows/reusing-workflows#supported-keywords-for-jobs-that-call-a-reusable-workflow

permissions: {}

jobs:
  build:
    # name: build image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    #   id-token: write

    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout
        uses: actions/checkout@v4

      # https://github.com/marketplace/actions/cosign-installer
      - name: Install Cosign
        # don't install on prs
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.3.0

      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          install: true
          version: latest

      # https://github.com/marketplace/actions/docker-metadata-action
      - name: Docker Metadata
        uses: docker/metadata-action@v5.5.0
        id: meta
        with:
          images: ${{ inputs.images }}
          flavor: ${{ inputs.flavor }}
          tags: ${{ inputs.tags }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to DockerHub
        if: github.event_name != 'pull_request' && inputs.dockerhub-enable
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login to GHCR
        if: github.event_name != 'pull_request' && inputs.ghcr-enable
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build and push
        uses: docker/build-push-action@v5.1.0
        id: build
        with:
          file: ${{ inputs.file }}
          platforms: ${{ inputs.platforms }}
          target: ${{ inputs.target }}
          build-args: ${{ inputs.build-args }}
          push: ${{ github.event_name != 'pull_request' && inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}
          provenance: ${{ inputs.provenance }}
          sbom: ${{ inputs.sbom }}

      - name: Sign Image
        if: github.event_name != 'pull_request' && inputs.cosign-sign-enable
        run: |
          for img in $(jq -r '.tags[] | split(",";"") | .[]' <<< "${JSON}" | awk -F':' '{print $1}' | sort -u); do
            cosign sign -y --key env://COSIGN_KEY --recursive \
              -a "repo=${{ github.repository }}" \
              -a "workflow=${{ github.workflow }}" \
              -a "ref=${{ github.sha }}" \
              -a "ref=${{ github.ref_name }}" \
              ${img}@${DIGEST}
          done
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
          JSON: ${{ steps.meta.outputs.json }}
          COSIGN_KEY: ${{ secrets.cosign-key }}
          COSIGN_PASSWORD: ${{ secrets.cosign-password }}

      - name: Verify Image
        if: github.event_name != 'pull_request' && inputs.cosign-verify-enable
        run: |
          printf '%s' "${COSIGN_PUBLIC_KEY}" > cosign.pub
          for img in $(jq -r '.tags[] | split(",";"") | .[]' <<< "${JSON}" | awk -F':' '{print $1}' | sort -u); do
            cosign verify --key env://COSIGN_PUBLIC_KEY ${img}@${DIGEST} | jq
          done
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
          JSON: ${{ steps.meta.outputs.json }}
          COSIGN_PUBLIC_KEY: ${{ vars.COSIGN_PUB }}

      # https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload public key
        if: github.event_name != 'pull_request' && inputs.cosign-upload-key
        uses: actions/upload-artifact@v4.0.0
        with:
          name: cosign.pub
          path: cosign.pub
          if-no-files-found: warn

      # - name: test
      #   uses: jsloan117/test-templates/.github/workflows/scan.yml@main
      #   with:
      #     images: ${{ steps.meta.outputs.json }}
